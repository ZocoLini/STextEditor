{
  "keywordsCompletations": [
    {
      "value": "public",
      "iconName": "keyword.png"
    },
    {
      "value": "private",
      "iconName": "keyword.png"
    },
    {
      "value": "abstract",
      "iconName": "keyword.png"
    },
    {
      "value": "protected",
      "iconName": "keyword.png"
    },
    {
      "value": "static",
      "iconName": "keyword.png"
    },
    {
      "value": "final",
      "iconName": "keyword.png"
    },
    {
      "value": "void",
      "iconName": "keyword.png"
    },
    {
      "value": "int",
      "iconName": "keyword.png"
    },
    {
      "value": "boolean",
      "iconName": "keyword.png"
    },
    {
      "value": "return",
      "iconName": "keyword.png"
    },
    {
      "value": "true",
      "iconName": "keyword.png"
    },
    {
      "value": "false",
      "iconName": "keyword.png"
    },
    {
      "value": "null",
      "iconName": "keyword.png"
    },
    {
      "value": "this",
      "iconName": "keyword.png"
    },
    {
      "value": "new",
      "iconName": "keyword.png"
    },
    {
      "value": "class",
      "iconName": "keyword.png"
    },
    {
      "value": "extends",
      "iconName": "keyword.png"
    },
    {
      "value": "implements",
      "iconName": "keyword.png"
    },
    {
      "value": "interface",
      "iconName": "keyword.png"
    },
    {
      "value": "package",
      "iconName": "keyword.png"
    },
    {
      "value": "import",
      "iconName": "keyword.png"
    },
    {
      "value": "super",
      "iconName": "keyword.png"
    },
    {
      "value": "try",
      "iconName": "keyword.png"
    },
    {
      "value": "catch",
      "iconName": "keyword.png"
    },
    {
      "value": "finally",
      "iconName": "keyword.png"
    },
    {
      "value": "throw",
      "iconName": "keyword.png"
    },
    {
      "value": "throws",
      "iconName": "keyword.png"
    },
    {
      "value": "assert",
      "iconName": "keyword.png"
    },
    {
      "value": "break",
      "iconName": "keyword.png"
    },
    {
      "value": "continue",
      "iconName": "keyword.png"
    },
    {
      "value": "case",
      "iconName": "keyword.png"
    },
    {
      "value": "default",
      "iconName": "keyword.png"
    },
    {
      "value": "do",
      "iconName": "keyword.png"
    },
    {
      "value": "enum",
      "iconName": "keyword.png"
    },
    {
      "value": "goto",
      "iconName": "keyword.png"
    },
    {
      "value": "instanceof",
      "iconName": "keyword.png"
    },
    {
      "value": "native",
      "iconName": "keyword.png"
    },
    {
      "value": "const",
      "iconName": "keyword.png"
    }
  ],
  "liveTemplatesCompletations": [
    {
      "description": "Creates a switch statement",
      "completation": "switch ($END$)\n{\n\tcase $END$:\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}",
      "value": "switch",
      "iconName": "template.png"
    },
    {
      "description": "Creates a try catch statement",
      "completation": "try\n{\n\t$END$\n}\ncatch (Exception e)\n{\n\te.printStackTrace();\n}",
      "value": "try",
      "iconName": "template.png"
    },
    {
      "description": "Creates a class",
      "completation": "public class $END$\n{\n\t\n}",
      "value": "class",
      "iconName": "template.png"
    },
    {
      "description": "Creates an interface",
      "completation": "public interface $END$\n{\n\t\n}",
      "value": "interface",
      "iconName": "template.png"
    },
    {
      "description": "Creates a Scanner object",
      "completation": "new Scanner(System.in)",
      "value": "scan",
      "iconName": "template.png"
    },
    {
      "description": "Creates a System.out.println",
      "completation": "System.out.println($END$);",
      "value": "sout",
      "iconName": "template.png"
    },
    {
      "description": "Creates an if statement",
      "completation": "if ($END$)\n{\n\t\n}",
      "value": "if",
      "iconName": "template.png"
    },
    {
      "description": "Creates a main method",
      "completation": "public static void main(String[] args)\n{\n\t$END$\n}",
      "value": "main",
      "iconName": "template.png"
    },
    {
      "description": "Creates a for loop",
      "completation": "for (int i \u003d 0; i \u003c $END$; i++)\n{\n\t\n}",
      "value": "for",
      "iconName": "template.png"
    },
    {
      "description": "Creates a main method",
      "completation": "switch ($VAR$)\n{\n\tcase $END$:\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}",
      "value": "pruebaCaret",
      "iconName": "template.png"
    },
    {
      "description": "Creates a while loop",
      "completation": "while ($END$)\n{\n\t\n}",
      "value": "while",
      "iconName": "template.png"
    },
    {
      "description": "Creates an else statement",
      "completation": "else\n{\n\t\n}",
      "value": "else",
      "iconName": "template.png"
    },
    {
      "description": "Creates a do while loop",
      "completation": "do\n{\n\t\n} while ($END$);",
      "value": "do",
      "iconName": "template.png"
    }
  ]
}